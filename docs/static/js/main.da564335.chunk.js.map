{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","setcategories","i","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAEI,sBAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACK,uBACGO,KAAK,OACLC,MAAQT,EACRU,SApBe,SAAEP,GACzBF,EAAcE,EAAEQ,OAAOF,aA0B/BZ,EAAYe,UAAW,CACnBd,cAAee,IAAUC,KAAKC,Y,mCCnCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAW,yCAAhB,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,SCDLO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAE1B,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfCC,qBAAW,WACRxB,EAASC,GACJwB,MACD,SAAAC,GAEIH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAIEqB,EDlByBK,CAAc1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,iDAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEXrBgB,EAAe,SAAAC,GAGxB,MAAoC9C,mBAAU,CAAC,mBAA/C,mBAAO+C,EAAP,KAAmBC,EAAnB,KAEA,OACI,qCACE,iGACD,cAAC,EAAD,CAAajD,cAAgBiD,IAC5B,uBACA,6BAEQD,EAAWpB,KAAK,SAACT,EAAU+B,GAAX,OAEZ,cAAC,EAAD,CAEA/B,SAAUA,GADJA,Y,MCf5BgC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.da564335.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories, } )=> {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const hanldelInputChange = ( e ) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n\n            setCategories( cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n\n        <form onSubmit={ handleSubmit }>\n             <input\n                type='text'\n                value={ inputValue }\n                onChange={ hanldelInputChange }\n            />\n\n        </form>\n    )\n}\n\nAddCategory.prototype ={\n    setCategories: PropTypes.func.isRequired\n}\n\n\n\n","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=LXcTujdlVArJRcWenu5BcE31p2DS6wrz`;\n    const resp = await fetch( url );\n\n    const { data } = await resp.json();\n\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    })\n\n  \n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className ='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title }/>\n            <p> { title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport {useFetchGifs} from '../hooks/useFetchGifs';\n\nimport {GifGridItem} from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading} = useFetchGifs( category );\n   \n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n        { loading && <p className=\"animate__animated animate__pulse\">Cargando...</p>}\n        <div className=\"card-grid animate__animatedanimate__fadeInDown\">\n            {\n                images.map( img => (\n                    <GifGridItem \n                        key={ img.id }\n                        { ...img }\n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n  \n     useEffect( () => {\n        getGifs( category )\n            .then(\n            imgs => {\n\n                setstate({\n                    data: imgs,\n                    loading: false\n                })\n            } \n            )\n    }, [ category ])\n\n    \n\n    return state;\n\n}","\nimport React, {useState}  from 'react'\nimport {AddCategory} from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid';\n\n\nexport const GifExpertApp = props => {\n\n\n    const [categories, setcategories] = useState( ['Rick and morty']);\n\n    return (\n        <>\n          <h4>GifExpertApp(solo ingresa el nombre del gif que quieres buscar)</h4>\n         <AddCategory setCategories={ setcategories }/>\n          <hr />\n          <ol>\n              {\n                  categories.map( (category, i) => (\n                    \n                      <GifGrid \n                      key= {category }\n                      category={category}\n                      />\n                  ))\n              }\n          </ol>\n        </>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}